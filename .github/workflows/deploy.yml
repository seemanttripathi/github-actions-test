name: Deploy main to xo

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_PREFIX: registry.xo.builders/github-actions-abcd0123/main/

jobs:
  XO-build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://registry.xo.builders/
          username: xo-github-actions-abcd0123+imguser
          password: ${{ secrets.XO_BRANCH_MAIN_DOCKER_PASSWORD }}
      - name: Write kubeconfig from base64
        run: |
          echo "${{ secrets.XO_BRANCH_MAIN_K8S_ACCESS }}" | base64 -d > config
          echo "KUBECONFIG=$(pwd)/config" >> $GITHUB_ENV
      - name: downcase REPO
        run: |
          image="${GITHUB_REPOSITORY#*/}"
          echo "IMAGE_NAME=${image,,}" >>${GITHUB_ENV}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}${{ env.IMAGE_NAME }}
      - name: Validate existing .env file
        run: |
          ENV_FILE=".env"
          if [ ! -f "$ENV_FILE" ]; then exit 0; fi
          while IFS= read -r line || [ -n "$line" ]; do
            line="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            if [ -z "$line" ]; then continue; fi
            if [[ "$line" == \#* ]]; then continue; fi
            if ! [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*=.*$ ]]; then
              echo "Invalid .env"; exit 1
            fi
          done < "$ENV_FILE"
      - name: Put down .env file
        run: |
          echo "writing .env file..."
          echo "# This file is generated or updated by the xo deploy workflow" >> .env
          tac .env | awk -F'=' '!seen[$1]++' | tac > .env.tmp2 && mv .env.tmp2 .env
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Deploy on XO 
        env:
          DOCKER_SERVER: 'registry.xo.builders'
          DOCKER_USERNAME: 'xo-github-actions-abcd0123+imguser'
          DOCKER_PASSWORD: '${{ secrets.XO_BRANCH_MAIN_DOCKER_PASSWORD }}'
          FULL_IMAGE_WITH_TAG: '${{ env.DOCKER_METADATA_OUTPUT_TAGS }}'
          POD_NAME: '${{ env.IMAGE_NAME }}'
          DEBUG: 1
        run: |
          #!/bin/bash
          test -z "${DEBUG}" || set -o xtrace
          set +e  # revert the default `set -e` which github actions enable automatically
          cd "$(dirname "$0")"

          cert=$CERT_PATH
          export KUBECONFIG="${GITHUB_WORKSPACE}/config"
          # Reusable backoffretry function
          backoffretry() {
              local max_retries=$1     # Maximum number of retries
              local delay=$2           # Initial delay in seconds
              shift 2
              local command="$@"       # Command to execute (e.g., main function)
              local attempt=1          # Current attempt counter

              while [ $attempt -le $max_retries ]; do
                  echo "Attempt $attempt of $max_retries"

                  # Execute the command
                  $command
                  local exit_code=$?

                  if [ $exit_code -eq 0 ]; then
                      echo "Success on attempt $attempt"
                      return 0
                  else
                      echo "Failure on attempt $attempt with exit code $exit_code"
                  fi

                  if [ $attempt -lt $max_retries ]; then
                      echo "Waiting for $delay seconds before retry..."
                      sleep $delay
                      delay=$((delay * 2)) # Exponential backoff
                      attempt=$((attempt + 1))
                  else
                      echo "Exceeded maximum retries. Exiting with failure."
                      return $exit_code
                  fi
              done
          }

          main() {

            kubectl create secret generic project-env-secret --from-env-file=${GITHUB_WORKSPACE}/.env --dry-run=client -o yaml | kubectl apply -f - || return 1
            kubectl create secret docker-registry regcred --docker-server="${DOCKER_SERVER}" --docker-username="${DOCKER_USERNAME}" --docker-password="${DOCKER_PASSWORD}" --dry-run=client -o yaml | kubectl apply -f - || return 1
            envsubst '$FULL_IMAGE_WITH_TAG $POD_NAME' < ${GITHUB_WORKSPACE}/.github/workflows/k8s/deployment.yml | kubectl apply -f - || return 1
          }

          # Parameters for backoffretry
          max_retries=4        # Maximum number of retries
          initial_delay=10     # Initial delay before retrying in seconds

          # Call backoffretry with the main function
          backoffretry $max_retries $initial_delay main
          exit_code=$?
          exit $exit_code